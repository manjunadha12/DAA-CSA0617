def floyd_algorithm(n, edges, distanceThreshold):
    # Initialize the distance matrix with infinity
    inf = float('inf')
    dist = [[inf] * n for _ in range(n)]
    
    # Set the distance from each city to itself as 0
    for i in range(n):
        dist[i][i] = 0
    
    # Initialize the distance matrix with the given edges
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  # Since the graph is undirected
    
    print("Initial distance matrix:")
    for row in dist:
        print(row)
    
    # Floyd's algorithm: update the distance matrix
    for k in range(n):
        for i in range(n):
            for j in range(n):
                # Check if the distance through k is shorter
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    print("\nDistance matrix after applying Floyd's Algorithm:")
    for row in dist:
        print(row)
    
    # Count how many cities are within the distance threshold
    count = 0
    for i in range(n):
        for j in range(n):
            if dist[i][j] <= distanceThreshold:
                count += 1
    
    return count

# Test case input
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4

# Run the algorithm
result = floyd_algorithm(n, edges, distanceThreshold)
print("\nNumber of pairs of cities with distance <= ", distanceThreshold, ":", result)
