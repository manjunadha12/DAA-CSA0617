class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            # Union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal(n, edges):
    # Step 1: Sort edges by weight
    edges.sort(key=lambda x: x[2])  # Sorting by the third element (weight)
    
    # Step 2: Initialize Union-Find
    uf = UnionFind(n)
    mst_edges = []
    mst_weight = 0
    
    # Step 3: Process edges and build MST
    for u, v, weight in edges:
        if uf.union(u, v):  # If u and v are not in the same component, union them
            mst_edges.append((u, v, weight))
            mst_weight += weight
        if len(mst_edges) == n - 1:  # If we have n-1 edges, the MST is complete
            break
    
    return mst_edges, mst_weight

# Test Case 1
n = 4  # Number of vertices
m = 5  # Number of edges
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]

# Run Kruskal's algorithm
mst_edges, mst_weight = kruskal(n, edges)

# Output the results
print("Edges in MST:", mst_edges)
print("Total weight of MST:", mst_weight)
