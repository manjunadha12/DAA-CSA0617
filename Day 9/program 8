import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None
    
    # Comparison method for heapq to work with Node objects
    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(characters, frequencies):
    # Create a priority queue (min-heap) with initial nodes
    heap = []
    for char, freq in zip(characters, frequencies):
        heapq.heappush(heap, Node(char, freq))
    
    # Build the Huffman Tree
    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        
        internal_node = Node(None, left.freq + right.freq)
        internal_node.left = left
        internal_node.right = right
        
        heapq.heappush(heap, internal_node)
    
    return heap[0]

def decode_huffman_tree(root, encoded_string):
    # Start from the root of the tree
    decoded_string = ""
    current_node = root
    for bit in encoded_string:
        # Traverse the tree based on the bit (0 -> left, 1 -> right)
        if bit == '0':
            current_node = current_node.left
        else:
            current_node = current_node.right
        
        # If we reach a leaf node, append the character and reset to the root
        if current_node.char is not None:
            decoded_string += current_node.char
            current_node = root
    
    return decoded_string

def huffman_decoding(characters, frequencies, encoded_string):
    # Build the Huffman Tree
    root = build_huffman_tree(characters, frequencies)
    
    # Decode the encoded string using the Huffman Tree
    decoded_string = decode_huffman_tree(root, encoded_string)
    
    return decoded_string

# Test Case 1
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
encoded_string = '1101100111110'

# Run the Huffman decoding function
result = huffman_decoding(characters, frequencies, encoded_string)
print(result)  # Output: "abacd"
