import heapq

def dijkstra(n, edges, source, target):
    # Step 1: Create the adjacency list from the edge list
    adj = {i: [] for i in range(n)}
    for u, v, w in edges:
        adj[u].append((v, w))
        adj[v].append((u, w))  # Since the graph is undirected
    
    # Step 2: Initialize distances, visited set, and priority queue
    distances = [float('inf')] * n
    distances[source] = 0
    pq = [(0, source)]  # (distance, vertex)
    
    while pq:
        # Step 3: Extract the vertex with the smallest distance
        current_distance, u = heapq.heappop(pq)
        
        # If we reached the target, return the distance
        if u == target:
            return current_distance
        
        # Step 4: Relax edges for neighbors
        for v, weight in adj[u]:
            new_distance = current_distance + weight
            if new_distance < distances[v]:
                distances[v] = new_distance
                heapq.heappush(pq, (new_distance, v))
    
    # If we finish processing without finding the target, return -1
    return -1

# Test Case 1
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14), 
    (1, 2, 10), (1, 3, 15), (2, 3, 11),
    (2, 5, 2), (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4

# Run Dijkstra's algorithm
result = dijkstra(n, edges, source, target)
print(result)  # Output: 20
