class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            # Union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal(n, edges):
    # Sort the edges by weight
    edges.sort(key=lambda x: x[2])  # Sorting by the third element (weight)
    
    uf = UnionFind(n)
    mst_edges = []
    mst_weight = 0
    
    for u, v, weight in edges:
        if uf.union(u, v):
            mst_edges.append((u, v, weight))
            mst_weight += weight
        if len(mst_edges) == n - 1:
            break
    
    return mst_edges, mst_weight

def verify_unique_mst(n, m, edges, given_mst):
    # Step 1: Run Kruskal's algorithm to find the MST from the graph
    mst_edges, mst_weight = kruskal(n, edges)
    
    # Step 2: Check if the given MST matches the MST from Kruskal's algorithm
    mst_edges_set = set(mst_edges)
    given_mst_set = set(given_mst)
    
    # Step 3: Check if the MST is unique
    if mst_edges_set == given_mst_set:
        return True, None  # The given MST is valid, and it matches the Kruskal's MST
    
    # Step 4: If they don't match, we may need to check for alternative MSTs
    # If there are edges with the same weight, we could have multiple MSTs.
    # This is a more complex case and may require finding alternative MSTs manually.
    return False, mst_edges

# Test Case 1
n = 4  # Number of vertices
m = 5  # Number of edges
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]

# Run the verification to check if the given MST is unique
is_unique, alternative_mst = verify_unique_mst(n, m, edges, given_mst)

# Output the result
if is_unique:
    print("Is the given MST unique? True")
else:
    print("Is the given MST unique? False")
    print("Another possible MST:", alternative_mst)
