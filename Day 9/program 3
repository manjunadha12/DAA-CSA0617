def minimumTimeRequired(jobs, k):
    # Sort jobs in descending order to improve the greedy approach
    jobs.sort(reverse=True)

    # Helper function to check if it's possible to assign jobs without exceeding maxTime for any worker
    def canAssignJobs(maxTime):
        # Array to store current working time for each worker
        workers = [0] * k

        # Try to assign each job to a worker
        for job in jobs:
            assigned = False
            for i in range(k):
                if workers[i] + job <= maxTime:
                    workers[i] += job
                    assigned = True
                    break
            if not assigned:
                return False  # If a job cannot be assigned, return False
        return True  # All jobs were assigned within the limit

    # Binary search for the minimum possible maximum working time
    left, right = max(jobs), sum(jobs)
    while left < right:
        mid = (left + right) // 2
        if canAssignJobs(mid):
            right = mid  # Try a smaller maximum time
        else:
            left = mid + 1  # Increase the time limit

    return left  # The minimum possible maximum time

# Example usage:
jobs = [3, 2, 3]
k = 3
print(minimumTimeRequired(jobs, k))  # Output: 3
