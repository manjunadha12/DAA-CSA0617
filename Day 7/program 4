#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities

// Distance matrix (graph representation)
int dist[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};

// DP array to store minimum distances
int dp[1 << N][N];  // 2^N possible subsets of cities, N possible ending cities

// Function to find the minimum path distance using DP and bitmasking
int tsp(int mask, int pos) {
    // Base case: All cities have been visited, return distance to start city (city 0)
    if (mask == (1 << N) - 1) {
        return dist[pos][0];  // Return distance from pos to 0
    }

    // If already calculated, return the stored result
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }

    int ans = INT_MAX;  // Initialize the answer with a large value

    // Try to go to every other city
    for (int city = 0; city < N; city++) {
        // Check if the city has not been visited yet (not in the current mask)
        if ((mask & (1 << city)) == 0) {
            // Recur for the next city with updated mask
            int newAns = dist[pos][city] + tsp(mask | (1 << city), city);
            ans = (ans < newAns) ? ans : newAns;  // Take the minimum of current and new answer
        }
    }

    // Store the result in dp array and return
    dp[mask][pos] = ans;
    return ans;
}

int main() {
    // Initialize dp array to -1 (not yet calculated)
    for (int i = 0; i < (1 << N); i++) {
        for (int j = 0; j < N; j++) {
            dp[i][j] = -1;
        }
    }

    // Find the minimum cost starting from city 0
    int result = tsp(1, 0);  // Initially only city 0 is visited, and we start at city 0
    printf("The minimum path distance is: %d\n", result);

    return 0;
}
