def permute(nums):
    result = []
    
    # Helper function to perform backtracking
    def backtrack(start):
        # If we've considered all elements, add the current permutation to the result
        if start == len(nums):
            result.append(list(nums))
            return
        
        for i in range(start, len(nums)):
            # Swap the current element with the start element
            nums[start], nums[i] = nums[i], nums[start]
            # Recursively generate permutations with the current element in the start position
            backtrack(start + 1)
            # Backtrack: Swap the elements back
            nums[start], nums[i] = nums[i], nums[start]
    
    # Start the backtracking process from index 0
    backtrack(0)
    
    return result

# Example 1:
nums = [1, 2, 3]
print(permute(nums))  # Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
