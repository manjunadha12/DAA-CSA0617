def solve_sudoku(board):
    def is_valid(board, row, col, num):
        # Check if 'num' is not in the current row
        for i in range(9):
            if board[row][i] == num:
                return False
        
        # Check if 'num' is not in the current column
        for i in range(9):
            if board[i][col] == num:
                return False
        
        # Check if 'num' is not in the 3x3 sub-box
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(3):
            for j in range(3):
                if board[start_row + i][start_col + j] == num:
                    return False
        
        return True

    def solve(board):
        # Try to find an empty cell
        for row in range(9):
            for col in range(9):
                if board[row][col] == ".":
                    for num in "123456789":
                        if is_valid(board, row, col, num):
                            board[row][col] = num  # Place the number
                            if solve(board):
                                return True
                            board[row][col] = "."  # Backtrack
                    return False
        return True  # If no empty cells, the board is solved

    solve(board)

# Example input board
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]

# Solve the Sudoku
solve_sudoku(board)

# Print the solved board
for row in board:
    print(row)
