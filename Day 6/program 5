import numpy as np

# Strassen's Matrix Multiplication algorithm
def strassen(A, B):
    # Base case for 2x2 matrix multiplication
    if len(A) == 2 and len(A[0]) == 2:
        a, b = A[0][0], A[0][1]
        c, d = A[1][0], A[1][1]
        e, f = B[0][0], B[0][1]
        g, h = B[1][0], B[1][1]

        # Strassen's 7 formulas
        M1 = (a + d) * (e + h)
        M2 = (c + d) * e
        M3 = a * (f - h)
        M4 = d * (g - e)
        M5 = (a + b) * h
        M6 = (c - a) * (e + f)
        M7 = (b - d) * (g + h)

        # Combining the results to get C
        C11 = M1 + M4 - M5 + M7
        C12 = M3 + M5
        C21 = M2 + M4
        C22 = M1 + M3 - M2 + M6
        
        return np.array([[C11, C12], [C21, C22]])

    else:
        raise ValueError("Strassen's algorithm is only for 2x2 matrices")

# Test case 1
A = np.array([[1, 7], [7, 5]])
B = np.array([[6, 8], [3, 5]])

C = strassen(A, B)
print("Test Case 1:")
print("A =")
print(A)
print("B =")
print(B)
print("C = A x B (Using Strassen's Algorithm):")
print(C)

# Test case 2
A2 = np.array([[1, 3], [9, 2]])
B2 = np.array([[6, 8], [3, 5]])

C2 = strassen(A2, B2)
print("\nTest Case 2:")
print("A =")
print(A2)
print("B =")
print(B2)
print("C = A x B (Using Strassen's Algorithm):")
print(C2)
