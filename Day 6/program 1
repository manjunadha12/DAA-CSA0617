def median_of_medians(arr, k):
    # Base case: If the array has only 5 or fewer elements, sort it and return the k-th element
    if len(arr) <= 5:
        return sorted(arr)[k]
    
    # Step 1: Split the array into groups of 5 elements
    sublists = [arr[i:i + 5] for i in range(0, len(arr), 5)]
    
    # Step 2: Find the median of each group
    medians = []
    for sublist in sublists:
        medians.append(sorted(sublist)[len(sublist) // 2])
    
    # Step 3: Recursively find the median of medians
    pivot = median_of_medians(medians, len(medians) // 2)
    
    # Step 4: Partition the array into elements less than, equal to, and greater than the pivot
    low = [x for x in arr if x < pivot]
    high = [x for x in arr if x > pivot]
    pivot_list = [x for x in arr if x == pivot]
    
    # Step 5: Determine where the k-th element is
    if k < len(low):
        return median_of_medians(low, k)
    elif k < len(low) + len(pivot_list):
        return pivot
    else:
        return median_of_medians(high, k - len(low) - len(pivot_list))

# Testing the function with the provided examples
arr1 = [12, 3, 5, 7, 19]
k1 = 2
arr2 = [12, 3, 5, 7, 4, 19, 26]
k2 = 3
arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k3 = 6

print(median_of_medians(arr1, k1))  # Expected Output: 5
print(median_of_medians(arr2, k2))  # Expected Output: 5
print(median_of_medians(arr3, k3))  # Expected Output: 6
