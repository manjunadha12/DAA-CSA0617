est cases
test_cases = {
    "Test Case 1": [(1, 2), (4, 5), (7, 1), (3, 6)],
    "Test Case 2": [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)],
}

# Running the test cases
for name, cities in test_cases.items():
    min_dist, best_route = tsp(cities)
    print(f"{name}:")
    print(f"Shortest Distance: {min_dist}")
  

import itertools

def total_cost(assignment, cost_matrix):
    """Calculate the total cost of a given assignment."""
    total = 0
    for worker, task in assignment:
        total += cost_matrix[worker][task]
    return total

def assignment_problem(cost_matrix):
    """Solve the assignment problem using exhaustive search."""
    num_workers = len(cost_matrix)
    workers = range(num_workers)
    
    min_cost = float('inf')
    best_assignment = []

    # Generate all possible permutations of worker indices
    for perm in itertools.permutations(workers):
        # Create the assignment pairs (worker, task)
        assignment = [(perm[i], i) for i in workers]
        current_cost = total_cost(assignment, cost_matrix)
        
        if current_cost < min_cost:
            min_cost = current_cost
            best_assignment = assignment

    return best_assignment, min_cost

# Test cases
test_cases = {
    "Test Case 1": [[3, 10, 7], [8, 5, 12], [4, 6, 9]],
    "Test Case 2": [[15, 9, 4], [8, 7, 18], [6, 12, 11]],
}

# Running the test cases
for name, cost_matrix in test_cases.items():
    optimal_assignment, total_cost_value = assignment_problem(cost_matrix)
    formatted_assignment = [(f'worker {worker + 1}', f'task {task + 1}') for worker, task in optimal_assignment]
    
    print(f"{name}:")
    print(f"Optimal Assignment: {formatted_assignment}")
    print(f"Total Cost: {total_cost_value}\n")

